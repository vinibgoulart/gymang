"""The root of all... queries"""
type Query {
  """The ID of an object"""
  id: ID!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  users(after: String, first: Int, before: String, last: Int): UserConnection!
  meWorkouts(after: String, first: Int, before: String, last: Int): WorkoutConnection!
  workouts(after: String, first: Int, before: String, last: Int, filters: WorkoutFilter): WorkoutConnection!
  workoutSplits(after: String, first: Int, before: String, last: Int, filters: WorkoutSplitFilter): WorkoutSplitConnection!
  exercises(after: String, first: Int, before: String, last: Int, filters: ExerciseFilter): ExerciseConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Represents a User"""
type User implements Node {
  """The ID of an object"""
  id: ID!
  firstName: String
  email: String
}

"""A connection to a list of items."""
type UserConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [UserEdge]!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type WorkoutConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [WorkoutEdge]!
}

"""An edge in a connection."""
type WorkoutEdge {
  """The item at the end of the edge"""
  node: Workout

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a Workout"""
type Workout implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  isPublic: Boolean!
  createdBy: User
  user: User
}

"""Used to filter workout"""
input WorkoutFilter {
  isPublic: Boolean
  fromLoggedUser: Boolean
  orderBy: [WorkoutOrdering!]
}

input WorkoutOrdering {
  sort: WorkoutSort!
  direction: DirectionEnum!
}

enum WorkoutSort {
  createdAt
  updatedAt
}

enum DirectionEnum {
  ASC
  DESC
}

"""A connection to a list of items."""
type WorkoutSplitConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [WorkoutSplitEdge]!
}

"""An edge in a connection."""
type WorkoutSplitEdge {
  """The item at the end of the edge"""
  node: WorkoutSplit

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a WorkoutSplit"""
type WorkoutSplit implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  modality: WorkoutSplitModalityEnum!
  recordInProgress: Record
  lastRecord: Record
  user: User
  workout: Workout
  records(after: String, first: Int, before: String, last: Int): RecordConnection!
}

enum WorkoutSplitModalityEnum {
  BODYBUILDING
  CYCLING
  RUNNING
  SWIMMING
  WALKING
  WEIGHTLIFTING
  YOGA
  BEACH_TENNIS
  BASKETBALL
  BOXING
  FOOTBALL
  HANDBALL
  VOLLEYBALL
  TENNIS
  OTHER
}

"""Represents a Record"""
type Record implements Node {
  """The ID of an object"""
  id: ID!
  createdAt: String
  finishedAt: String
}

"""A connection to a list of items."""
type RecordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecordEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type RecordEdge {
  """The item at the end of the edge"""
  node: Record

  """A cursor for use in pagination"""
  cursor: String!
}

"""Used to filter workout split"""
input WorkoutSplitFilter {
  workout: String
  orderBy: [WorkoutSplitOrdering!]
}

input WorkoutSplitOrdering {
  sort: WorkoutSplitSort!
  direction: DirectionEnum!
}

enum WorkoutSplitSort {
  createdAt
  updatedAt
  executedAt
}

"""A connection to a list of items."""
type ExerciseConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [ExerciseEdge]!
}

"""An edge in a connection."""
type ExerciseEdge {
  """The item at the end of the edge"""
  node: Exercise

  """A cursor for use in pagination"""
  cursor: String!
}

"""Represents a Exercise"""
type Exercise implements Node {
  """The ID of an object"""
  id: ID!
  name: String!
  series: String!
  repetitions: String!
  breakTime: String
  muscleGroup: ExerciseMuscleGroupEnum!
  weight: String
  sessionInProgress: Session
  lastSession: Session
  sessions(after: String, first: Int, before: String, last: Int): SessionConnection!
  user: User
  workoutSplit: WorkoutSplit
}

enum ExerciseMuscleGroupEnum {
  CHEST
  BACK
  LEGS
  ARMS
  SHOULDERS
  CORE
  CALVES
  GLUTES
  POSTERIOR_LEGS
  QUADRICEPS
  BICEPS
  TRICEPS
  TRAPEZIUS
  LUMBAR
  FOREARMS
  OTHER
}

"""Represents a Session"""
type Session implements Node {
  """The ID of an object"""
  id: ID!
  series: String!
  repetitions: String!
  breakTime: String
  weight: String
  record: ID
  createdAt: String
  finishedAt: String
}

"""A connection to a list of items."""
type SessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SessionEdge]
}

"""An edge in a connection."""
type SessionEdge {
  """The item at the end of the edge"""
  node: Session

  """A cursor for use in pagination"""
  cursor: String!
}

"""Used to filter exercises"""
input ExerciseFilter {
  workoutSplit: String
  orderBy: [ExerciseOrdering!]
}

input ExerciseOrdering {
  sort: ExerciseSort!
  direction: DirectionEnum!
}

enum ExerciseSort {
  createdAt
  updatedAt
}

type Mutation {
  UserAdd(input: UserAddInput!): UserAddPayload
  UserLogin(input: UserLoginInput!): UserLoginPayload
  UserLogout(input: UserLogoutInput!): UserLogoutPayload
  WorkoutAdd(input: WorkoutAddInput!): WorkoutAddPayload
  WorkoutRemove(input: WorkoutRemoveInput!): WorkoutRemovePayload
  WorkoutSplitAdd(input: WorkoutSplitAddInput!): WorkoutSplitAddPayload
  WorkoutSplitRemove(input: WorkoutSplitRemoveInput!): WorkoutSplitRemovePayload
  WorkoutSplitRecordStart(input: WorkoutSplitRecordStartInput!): WorkoutSplitRecordStartPayload
  ExerciseAdd(input: ExerciseAddInput!): ExerciseAddPayload
  ExerciseSessionStart(input: ExerciseSessionStartInput!): ExerciseSessionStartPayload
  ExerciseSessionFinish(input: ExerciseSessionFinishInput!): ExerciseSessionFinishPayload
  ExerciseRemove(input: ExerciseRemoveInput!): ExerciseRemovePayload
}

type UserAddPayload {
  user: User
  error: String
  success: String
  clientMutationId: String
}

input UserAddInput {
  email: String!
  password: String!
  firstName: String!
  clientMutationId: String
}

type UserLoginPayload {
  user: User
  error: String
  success: String
  clientMutationId: String
}

input UserLoginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserLogoutPayload {
  success: String
  error: String
  clientMutationId: String
}

input UserLogoutInput {
  clientMutationId: String
}

type WorkoutAddPayload {
  workout: Workout
  error: String
  success: String
  clientMutationId: String
}

input WorkoutAddInput {
  name: String!
  isPublic: Boolean!
  originalWorkout: ID
  clientMutationId: String
}

type WorkoutRemovePayload {
  workout: Workout
  error: String
  success: String
  clientMutationId: String
}

input WorkoutRemoveInput {
  id: ID!
  clientMutationId: String
}

type WorkoutSplitAddPayload {
  workoutSplit: WorkoutSplit
  error: String
  success: String
  clientMutationId: String
}

input WorkoutSplitAddInput {
  name: String!
  modality: WorkoutSplitModalityEnum!
  workout: ID!
  clientMutationId: String
}

type WorkoutSplitRemovePayload {
  workoutSplit: WorkoutSplit
  error: String
  success: String
  clientMutationId: String
}

input WorkoutSplitRemoveInput {
  id: ID!
  clientMutationId: String
}

type WorkoutSplitRecordStartPayload {
  workoutSplit: WorkoutSplit
  error: String
  success: String
  clientMutationId: String
}

input WorkoutSplitRecordStartInput {
  workoutSplitId: ID!
  clientMutationId: String
}

type ExerciseAddPayload {
  exercise: Exercise
  error: String
  success: String
  clientMutationId: String
}

input ExerciseAddInput {
  name: String!
  workoutSplit: ID!
  repetitions: String!
  series: String!
  breakTime: String
  muscleGroup: ExerciseMuscleGroupEnum!
  weight: String
  clientMutationId: String
}

type ExerciseSessionStartPayload {
  exercise: Exercise
  error: String
  success: String
  clientMutationId: String
}

input ExerciseSessionStartInput {
  id: ID!
  clientMutationId: String
}

type ExerciseSessionFinishPayload {
  exercise: Exercise
  error: String
  success: String
  clientMutationId: String
}

input ExerciseSessionFinishInput {
  exerciseId: ID!
  sessionId: ID!
  clientMutationId: String
}

type ExerciseRemovePayload {
  deletedId: ID
  error: String
  success: String
  clientMutationId: String
}

input ExerciseRemoveInput {
  exerciseId: ID!
  clientMutationId: String
}